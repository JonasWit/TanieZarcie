@using WEB.Shop.Application.Crawlers
@using WEB.Shop.Application.Enums
@inject CrawlersCommander Commander


@if (!loading)
{
    <!-- Cards -->
    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-10 col-lg-9 col-md-8 ml-auto">
                <div class="row pt-md-5 mt-md-3 mb-5">

                    <!-- Crawlers Card -->
                    <div class="col-xl-3 col-sm-6 p-2">
                        <div class="card tza-card-common">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <i class="fas fa-bug fa-3x text-warning"></i>
                                    <div class="text-right text-secondary">
                                        <h3>All Data</h3>
                                        <h5>@($"{Commander.DataCacheCount.Sum(s => s.Value)} Cached")</h5>
                                        <h5>@($"{Commander.DataCacheCount.Sum(s => s.Value)} Stored")</h5>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer text-secondary">
                                <table>
                                    <tbody>
                                        <tr>
                                            <td>
                                                <button @onclick="RunEngine" class="bg-transparent border-0">
                                                    <i class="fas fa-sync mr-3 tza-nav-icon"></i>
                                                    <span>Run all crawlers</span>
                                                </button>
                                            </td>
                                            <td>
                                                <button @onclick="ClearCache" class="bg-transparent border-0">
                                                    <i class="fas fa-cut mr-3 tza-nav-icon"></i>
                                                    <span>Clear Cache</span>
                                                </button>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <button @onclick="UpdateDataBase" class="bg-transparent border-0">
                                                    <i class="fas fa-sync mr-3 tza-nav-icon"></i>
                                                    <span>Update Database</span>
                                                </button>
                                            </td>
                                            <td>
                                                <button @onclick="ClearDataBase" class="bg-transparent border-0">
                                                    <i class="fas fa-cut mr-3 tza-nav-icon"></i>
                                                    <span>Clear Batabase</span>
                                                </button>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- Shops Cards -->
                    @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                    {
                        <div class="col-xl-3 col-sm-6 p-2">
                            <div class="card tza-card-common">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between">
                                        <i class="fas fa-database fa-3x text-warning"></i>
                                        <div class="text-right text-secondary">
                                            <h3>@shop.ToString()</h3>
                                            <h5>@($"{Commander.DataCacheCount.Sum(s => s.Value)} Cached")</h5>
                                            <h5>@($"{ @Commander.DataBaseCheck.Where(x => x.Shop == shop.ToString()).FirstOrDefault()?.PromoProductsCount} Stored")</h5>
                                        </div>
                                    </div>
                                    <div class="progress mb-4" style="height: 20px">
                                        <div class="progress-bar progress-bar-striped font-weight-bold bg-info" style="width: 10%">
                                            10%
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer text-secondary">
                                    <table>
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <button @onclick="(() => RunEngine(shop))" class="bg-transparent border-0">
                                                        <i class="fas fa-sync mr-3 tza-nav-icon"></i>
                                                        <span>Run Crawler</span>
                                                    </button>
                                                </td>
                                                <td>
                                                    <button @onclick="(() => ClearCache(shop))" class="bg-transparent border-0">
                                                        <i class="fas fa-cut mr-3 tza-nav-icon"></i>
                                                        <span>Clear Cache</span>
                                                    </button>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <button @onclick="(() => UpdateDataBase(shop))" class="bg-transparent border-0">
                                                        <i class="fas fa-sync mr-3 tza-nav-icon"></i>
                                                        <span>Update Database</span>
                                                    </button>
                                                </td>
                                                <td>
                                                    <button @onclick="(() => ClearDataBase(shop))" class="bg-transparent border-0">
                                                        <i class="fas fa-cut mr-3 tza-nav-icon"></i>
                                                        <span>Clear Batabase</span>
                                                    </button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Tables -->
    <div class="container-fluid">
        <div class="row mb-5">
            <div class="col-xl-10 col-lg-9 col-md-8 ml-auto">
                <div class="row align-items-center">
                    @*<div class="col-xl-7 col-12 mb-3 mb-xl-0">
                        <h3 class="text-muted text-center">Data Summary</h3>
                        <table class="table table-light table-hover text-center rounded">
                            <thead>
                                <tr class="text-muted">
                                    <th>Shop</th>
                                    <th>Cache</th>
                                    <th>Database</th>
                                    <th>Run Crawler</th>
                                    <th>Clear Data</th>
                                    <th>Update Database</th>
                                    <th>Delete Data</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                                {
                                    <tr>
                                        <td>@shop.ToString()</td>
                                        <td>@Commander.DataCachePromoCount[shop.ToString()] / @Commander.DataCacheCount[shop.ToString()]</td>
                                        <td>111</td>
                                        <td><button type="button" class="btn btn-info btn-sm" @onclick="(() => RunEngine(shop))">Run</button></td>
                                        <td><button type="button" class="btn btn-warning btn-sm" @onclick="(() => ClearCache(shop))">Clear</button></td>
                                        <td><button type="button" class="btn btn-info btn-sm" @onclick="(() => UpdateDataBase(shop))">Update</button></td>
                                        <td><button type="button" class="btn btn-warning btn-sm" @onclick="(() => ClearDataBase(shop))">Delete</button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>*@
                    <div class="col-xl-6 col-12 mb-3 mb-xl-0">
                        <h4 class="text-muted text-center">Data in Memory</h4>
                        <div class="bg-light text-dark p-4 rounded">
                            @{
                                double totalCachedProducts = Commander.DataCacheCount.Sum(s => s.Value);
                                double avg = (totalCachedProducts / Commander.DataCacheCount.Count(x => x.Value > 0));

                                @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                                {
                                    double shopCachedProducts = Commander.DataCacheCount[shop.ToString()];
                                    double shopCachedShare = totalCachedProducts == 0 ? 0 : Math.Round(((shopCachedProducts / totalCachedProducts) * 100), 2);

                                    string color = "bg-danger";

                                    if (shopCachedShare >= 0 && shopCachedShare <= (avg * 0.2))
                                    {
                                        color = "bg-danger";
                                    }
                                    else if (shopCachedShare >= (avg * 0.21) && shopCachedShare <= (avg * 0.7))
                                    {
                                        color = "bg-warning";
                                    }
                                    else
                                    {
                                        color = "bg-success";
                                    }

                                    <!-- Cached Data Status-->
                                    <h6 class="mb-3 text-center">@($"{@shop.ToString()} - Cached Data")</h6>
                                    <div class="progress mb-4" style="height: 20px">
                                        <div class="progress-bar text-dark text-center progress-bar-striped font-weight-bold @color" style="width: @($"{ shopCachedShare }%")">
                                            @($"{ shopCachedShare }%")
                                        </div>
                                    </div>

                                    <!-- Database Status-->



                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- Loader-->
    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-10 col-lg-9 col-md-8 ml-auto">
                <div class="row pt-md-5 mt-md-3 mb-5">
                    <div class="tza-loader">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.CheckDataBase();
            loading = false;
        }
    }

    #region Crawlers

    private async Task RunEngine()
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.RunEngineAsync();
            loading = false;
        }
    }

    private async Task RunEngine(Shops shop)
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.RunEngineAsync(shop.ToString());
            loading = false;
        }
    }

    private async Task ClearCache()
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.ClearCacheAsync();
            loading = false;
        }
    }

    private async Task ClearCache(Shops shop)
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.ClearCacheAsync(shop.ToString());
            loading = false;
        }
    }

    #endregion

    #region Database

    private async Task RefreshDataBaseSummary()
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.CheckDataBase();
            loading = false;
        }
    }

    private async Task ClearDataBase()
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.ClearDataBaseAsync();
            loading = false;
        }
    }

    private async Task ClearDataBase(Shops shop)
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.ClearDataBaseAsync(shop.ToString());
            loading = false;
        }
    }

    private async Task UpdateDataBase()
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.UpdateAllData();
            loading = false;
        }
    }

    private async Task UpdateDataBase(Shops shop)
    {
        if (loading)
        {
            return;
        }
        else
        {
            loading = true;
            await Commander.UpdateDataBase(shop.ToString());
            loading = false;
        }
    }

    #endregion

}
