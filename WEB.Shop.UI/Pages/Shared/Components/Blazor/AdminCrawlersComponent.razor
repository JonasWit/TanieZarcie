@using WEB.Shop.Application.Crawlers
@using WEB.Shop.Application.Enums
@inject CrawlersCommander Commander


@if (crawlersTabLoading)
{
    <div class="block">
        <progress class="progress is-small is-warning" max="100">25%</progress>
    </div>
}

<div class="box">
    <div class="columns">
        <div class="column">
            <div class="box">
                <table class="table is-narrow is-striped">
                    <thead>
                        <tr>
                            <th>Shop</th>
                            <th>Data (Promo / Total)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                        {
                            <tr @onclick="(() => SelectShop(shop))" class="@($"{(activeShop == shop && !activeAll ? "is-selected" : "")}")">
                                <td>@shop.ToString()</td>
                                <td>@Commander.DataCachePromoCount[shop.ToString()] / @Commander.DataCacheCount[shop.ToString()]</td>
                            </tr>
                        }
                        <tr @onclick="SelectAllShops" class="@($"{(activeAll ? "is-selected" : "")}")">
                            <td>All Shops</td>
                            <td>
                                @if (Commander.Results.Count != 0)
                                {
                                    <span class="tag is-warning">@Commander.Results.Count</span>
                                }
                                else
                                {
                                    <span class="tag is-success">@Commander.Results.Count</span>
                                }
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="column">
            <div class="box">
                @if (activeAll)
                {
                    <p class="content ">Options for All</p>
                    <button class="button is-small is-warning" @onclick="RunEngine">Run Engine for All Crawlers</button>
                    <button class="button is-small is-danger" @onclick="ClearCache">Clear All</button>
                }
                else
                {
                    <p class="content">Options for @activeShop.ToString()</p>
                    <button class="button is-small is-warning" @onclick="(() => RunEngine(activeShop))">Run Crawler for @activeShop.ToString()</button>
                    <button class="button is-small is-danger" @onclick="(() => ClearCache(activeShop))">Clear data for @activeShop.ToString()</button>
                }
            </div>
        </div>
    </div>
</div>
}

@code {

    private bool crawlersTabLoading;

    private Shops activeShop = Shops.Biedronka;
    private bool activeAll = false;


    protected override async Task OnInitializedAsync()
    {

    }

    private void SelectShop(Shops shop)
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            activeAll = false;
            activeShop = shop;
            crawlersTabLoading = false;
        }
    }

    private void SelectAllShops()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            activeAll = true;
            crawlersTabLoading = false;
        }
    }

    #region Crawlers

    private async Task RunEngine()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await Commander.RunEngineAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task RunEngine(Shops shop)
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await Commander.RunEngineAsync(shop.ToString());
            crawlersTabLoading = false;
        }
    }

    private async Task ClearCache()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await Commander.ClearCacheAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task ClearCache(Shops shop)
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await Commander.ClearCacheAsync(shop.ToString());
            crawlersTabLoading = false;
        }
    }

    #endregion

}
