@page "/crawlerscommander"
@using Microsoft.AspNetCore.Components.Authorization
@using WEB.Shop.Application.Crawlers
@inject CrawlersCommander commander

<div>
    <div class="tabs is-centered">
        <ul>
            <li><a @onclick="SelectMainTab">Main Options</a></li>
            <li><a @onclick="SelectSummaryTab">Database Summary</a></li>
        </ul>
    </div>
</div>

@switch (activeTab)
{
    case ActiveTab.Main:

        <div>
            <button class="btn btn-primary" @onclick="RunEngine">Run All Crawlers</button>
        </div>
        <div>
            <button class="btn btn-primary" @onclick="ClearDataBase">Clear DataBase</button>
        </div>
        <div>
            <button class="btn btn-primary" @onclick="UpdateDataBase">Update Database with results</button>
        </div>


        <div>
            <button class="btn btn-primary">Delete products for Biedronka</button>
        </div>
        <div>
            <button class="btn btn-primary">Delete products for Lidl</button>
        </div>
        <div>
            <button class="btn btn-primary">Delete products for Kaufland</button>
        </div>


        break;
    case ActiveTab.Summary:

        <div>
            <div>
                <button class="btn btn-primary" @onclick="RefreshDataBaseSummary">Check DataBase Data</button>
            </div>
            <div>
                <button class="btn btn-primary" @onclick="RefreshEngineSummary">Check Engine Data</button>
            </div>
        </div>

        break;

    default:
        activeTab = ActiveTab.Main;
        break;
}

@code {

    private bool mainLoading;
    private bool summaryLoading;

    private ActiveTab activeTab = ActiveTab.Main;

    private enum ActiveTab
    {
        Main,
        Summary,
    }

    //protected override async Task OnInitializedAsync()
    //{
    //todo: add db data refresh on init
    //}

    private void SelectMainTab()
    {
        activeTab = ActiveTab.Main;
    }

    private void SelectSummaryTab()
    {
        activeTab = ActiveTab.Summary;
    }

    private async Task RefreshDataBaseSummary()
    {
        summaryLoading = true;
        //await commander.RunEngineAsync();
        summaryLoading = false;
    }

    private async Task RefreshEngineSummary()
    {
        summaryLoading = true;
        //await commander.RunEngineAsync();
        summaryLoading = false;
    }

    private async Task RunEngine()
    {
        mainLoading = true;
        await commander.RunEngineAsync();
        mainLoading = false;
    }

    private async Task ClearDataBase()
    {
        mainLoading = true;
        await commander.ClearDataBaseAsync();
        mainLoading = false;
    }

    private async Task UpdateDataBase()
    {
        mainLoading = true;
        await commander.UpdateDataBase();
        mainLoading = false;
    }
}