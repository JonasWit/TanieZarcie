@using WEB.Shop.Application.Crawlers
@using WEB.Shop.Application.Enums
@inject CrawlersCommander Commander


<div class="tabs is-centered">
    <ul>
        <li><a @onclick="SelectCrawlersTab">Crawlers</a></li>
        <li><a @onclick="SelectDatabaseTab">Database</a></li>
    </ul>
</div>


@switch (activeTab)
{
    case ActiveTab.Main:

        @if (crawlersTabLoading)
        {
            <div class="block">
                <progress class="progress is-small is-warning" max="100">25%</progress>
            </div>
        }

        <aside class="menu">
            <p class="menu-label">
                Crawlers
            </p>
            <ul class="menu-list">
                @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                {
                    <li>
                        <div class="columns">
                            <div class="column is-2">
                                <a @onclick="(() => SelectShop(shop))">@shop.ToString()</a>
                            </div>
                            <div class="column">
                                <div class="tags has-addons">
                                    <span class="tag">Cached Data</span>
                                    @if (Commander.DataCache[shop.ToString()] != 0)
                                    {
                                        <span class="tag is-warning">@Commander.DataCache[shop.ToString()]</span>
                                    }
                                    else
                                    {
                                        <span class="tag is-success">@Commander.DataCache[shop.ToString()]</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </li>
                }
                <li>
                    <div class="columns">
                        <div class="column is-2">
                            <a @onclick="SelectAllShops">All</a>
                        </div>
                        <div class="column">
                            <div class="tags has-addons">
                                <span class="tag">Cached Data</span>
                                @if (Commander.Results.Count != 0)
                                {
                                    <span class="tag is-warning">@Commander.Results.Count</span>
                                }
                                else
                                {
                                    <span class="tag is-success">@Commander.Results.Count</span>
                                }
                            </div>
                        </div>
                        <div class="column">
                            <div class="tags has-addons">
                                <span class="tag">Crawler Status</span>
                                <span class="tag is-success">No Issues</span>         
                            </div>
                        </div>
                    </div>
                </li>

            </ul>
        </aside>

        

        <div class="section">
            <div class="box">
                <div class="columns">
                    <div class="column is-2">
                        <p class="content is-small">All Crawlers</p>
                    </div>
                    <div class="column is-2">
                        <button class="button is-small is-warning is-outlined" @onclick="RunEngine">Run</button>
                    </div>
                    <div class="column is-2">
                        <button class="button is-small is-danger is-outlined" @onclick="ClearCache">Clear</button>
                    </div>
                    <div class="column is-2">
                        <p class="content is-small">@Commander.DataCache.Values.Sum()</p>
                    </div>
                </div>

                @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                {
                    <div class="columns">
                        <div class="column is-2">
                            <p class="content is-small">@shop.ToString()</p>
                        </div>
                        <div class="column is-2">
                            <button class="button is-small is-warning is-outlined" @onclick="(() => RunEngine(shop))">Run</button>
                        </div>
                        <div class="column is-2">
                            <button class="button is-small is-danger is-outlined" @onclick="(() => ClearCache(shop))">Clear</button>
                        </div>
                        <div class="column is-1">
                            <p class="content is-small">Cached Data:</p>
                        </div>
                        <div class="column is-1">
                            <p class="content is-small">@Commander.DataCache[shop.ToString()]</p>
                        </div>
                    </div>
                }
            </div>
        </div>


        <div class="block">
            <table class="table is-narrow is-striped is-small">
                <thead>
                    <tr>
                        <th>Section</th>
                        <th>Import</th>
                        <th>Clear</th>
                        <th>Cache</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <p class="content is-small">All Crawlers</p>
                        </td>
                        <td>
                            <button class="button is-small is-warning is-outlined" @onclick="RunEngine">Run</button>
                        </td>
                        <td>
                            <button class="button is-small is-danger is-outlined" @onclick="ClearCache">Clear</button>
                        </td>
                        <td>
                            <p class="content is-small">@Commander.DataCache.Values.Sum()</p>
                        </td>
                    </tr>
                    @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                    {
                        <tr>
                            <td>
                                <p class="content is-small">@shop.ToString()</p>
                            </td>
                            <td>
                                <button class="button is-small is-warning is-outlined" @onclick="(() => RunEngine(shop))">Run</button>
                            </td>
                            <td>
                                <button class="button is-small is-danger is-outlined" @onclick="(() => ClearCache(shop))">Clear</button>
                            </td>
                            <td>
                                <p class="content is-small">@Commander.DataCache[shop.ToString()]</p>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        break;

    case ActiveTab.Database:

        @if (databaseTabLoading)
        {
            <div class="block">
                <progress class="progress is-small is-warning" max="100">25%</progress>
            </div>
        }

        <div class="columns">
            <div class="column">
                <div class="block">
                    <button class="button is-success is-outlined is-small" @onclick="RefreshDataBaseSummary">Check DataBase Data</button>
                </div>
                <table class="table is-narrow is-striped is-small">
                    <thead>
                        <tr>
                            <th>Shop</th>
                            <th>Products</th>
                            <th>Oldest Record</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Commander.DataBaseCheck)
                        {
                            <tr>
                                <td>
                                    <p class="content is-small">@item.Shop</p>
                                </td>
                                <td>
                                    <p class="content is-small">@item.ProductsCount</p>
                                </td>
                                <td>
                                    <p class="content is-small">@item.OldestEntry</p>
                                </td>
                            </tr>
                        }
                        <tr>
                            <td>
                                <p class="content is-small is-bold">Total</p>
                            </td>
                            <td>
                                <p class="content is-small is-bold">@Commander.DataBaseCheck.Sum(x => x.ProductsCount)</p>
                            </td>
                            <td>
                                <p class="content is-small is-bold">-</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="column">
                <div class="block">
                    <button class="button is-warning is-outlined is-small" @onclick="UpdateDataBase">Update All Data</button>
                    <button class="button is-danger is-outlined is-small" @onclick="ClearDataBase">Clear All Data</button>
                </div>
                <table class="table is-narrow is-striped is-small">
                    <tbody>
                        @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                        {
                            <tr>
                                <td>
                                    <p class="content is-small">@shop.ToString()</p>
                                </td>
                                <td>
                                    <button class="button is-small is-outlined is-warning" @onclick="(() => UpdateDataBase(shop))">Update</button>
                                </td>
                                <td>
                                    <button class="button is-small is-outlined is-danger" @onclick="(() => ClearDataBase(shop))">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        break;

    default:
        activeTab = ActiveTab.Main;
        break;
}

@code {

    private bool crawlersTabLoading;
    private bool databaseTabLoading;

    private Shops activeShop = Shops.Biedronka;
    private bool activeAll = false;

    private ActiveTab activeTab = ActiveTab.Main;

    private enum ActiveTab
    {
        Main,
        Database,
    }

    protected override async Task OnInitializedAsync()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await Commander.CheckDataBase();
            databaseTabLoading = false;
        }
    }

    private void SelectShop(Shops shop)
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            activeAll = false;
            activeShop = shop;
            crawlersTabLoading = false;
        }
    }

    private void SelectAllShops()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            activeAll = true;
            crawlersTabLoading = false;
        }
    }

    private void SelectCrawlersTab()
    {
        activeTab = ActiveTab.Main;
    }

    private void SelectDatabaseTab()
    {
        activeTab = ActiveTab.Database;
    }

    #region Crawlers

    private async Task RunEngine()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await Commander.RunEngineAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task RunEngine(Shops shop)
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await Commander.RunEngineAsync(shop.ToString());
            crawlersTabLoading = false;
        }
    }

    private async Task ClearCache()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await Commander.ClearCacheAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task ClearCache(Shops shop)
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await Commander.ClearCacheAsync(shop.ToString());
            crawlersTabLoading = false;
        }
    }

    #endregion

    #region Database

    private async Task RefreshDataBaseSummary()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await Commander.CheckDataBase();
            databaseTabLoading = false;
        }
    }

    private async Task ClearDataBase()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await Commander.ClearDataBaseAsync();
            databaseTabLoading = false;
        }
    }

    private async Task ClearDataBase(Shops shop)
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await Commander.ClearDataBaseAsync(shop.ToString());
            databaseTabLoading = false;
        }
    }

    private async Task UpdateDataBase()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await Commander.UpdateAllData();
            databaseTabLoading = false;
        }
    }

    private async Task UpdateDataBase(Shops shop)
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await Commander.UpdateDataBase(shop.ToString());
            databaseTabLoading = false;
        }
    }

    #endregion

}