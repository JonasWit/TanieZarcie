@page "/crawlerscommander"
@using WEB.Shop.Application.Crawlers
@inject CrawlersCommander commander

<div>
    <div class="tabs is-centered">
        <ul>
            <li><a @onclick="SelectCrawlersTab" class="subtitle is-4">Crawlers</a></li>
            <li><a @onclick="SelectDatabaseTab" class="subtitle is-4">Database</a></li>
            <li><a @onclick="SelectSummaryTab" class="subtitle is-4">Summary</a></li>
        </ul>
    </div>
</div>

@switch (activeTab)
{
    case ActiveTab.Main:

        @if (crawlersTabLoading)
        {
            <div class="container">
                <progress class="progress is-medium is-primary" max="100">25%</progress>
            </div>
        }

        <div class="block">
            <table class="table is-striped">
                <tr>
                    <th class="subtitle">Section</th>
                    <th class="subtitle">Import</th>
                    <th class="subtitle">Clear</th>
                    <th class="subtitle">Cache</th>
                </tr>
                <tr>
                    <td>
                        <p class="content is-medium">All Crawlers</p>
                    </td>
                    <td>
                        <button class="button is-warning is-outlined" @onclick="RunEngine">Run</button>
                    </td>
                    <td>
                        <button class="button is-danger is-outlined" @onclick="ClearCache">Clear</button>
                    </td>
                    <td>
                        <p class="content is-medium">@commander.DataCache.Values.Sum()</p>
                    </td>
                </tr>

                @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                {
                    <tr>
                        <td>
                            <p class="content is-medium">@shop.ToString()</p>
                        </td>
                        <td>
                            <button class="button is-warning is-outlined" @onclick="(() => RunEngine(shop))">Run</button>
                        </td>
                        <td>
                            <button class="button is-danger is-outlined" @onclick="(() => RunEngine(shop))">Clear</button>
                        </td>
                        <td>
                            <p class="content is-medium">@commander.DataCache[shop.ToString()]</p>
                        </td>
                    </tr>
                }

            </table>
        </div>

        break;

    case ActiveTab.Database:

        @if (databaseTabLoading)
        {
            <div class="container">
                <progress class="progress is-medium is-primary" max="100">25%</progress>
            </div>
        }

        <div class="block">
            <p class="subtitle has-text-centered">General Database Options</p>
            <button class="button is-warning is-outlined" @onclick="UpdateDataBase">Update All Data</button>
            <button class="button is-danger is-outlined" @onclick="ClearDataBase">Clear All Data</button>
        </div>

        <div class="block">
            <p class="subtitle has-text-centered">Update Database Options</p>
            <table class="table is-striped">
                @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                {
                    <tr>
                        <td>
                            <p class="content is-medium">@shop.ToString()</p>
                        </td>
                        <td>
                            <button class="button is-warning is-outlined" @onclick="(() => UpdateDataBase(shop))">Update</button>
                        </td>
                        <td>
                            <button class="button is-danger is-outlined" @onclick="(() => ClearDataBase(shop))">Delete</button>
                        </td>
                    </tr>
                }
            </table>
        </div>

        break;

    case ActiveTab.Summary:

        @if (summaryTabLoading)
        {
            <div class="container">
                <progress class="progress is-medium is-primary" max="100">25%</progress>
            </div>
        }

        <div class="block">
            <p class="subtitle has-text-centered">General Database Options</p>
            <button class="button is-success is-outlined" @onclick="RefreshDataBaseSummary">Check DataBase Data</button>
        </div>

        <div class="block">
            <table class="table is-striped">
                <tr>
                    <th>Shop</th>
                    <th>Products</th>
                    <th>Oldest Record</th>
                </tr>

                @foreach (var item in commander.DataBaseCheck)
                {
                    <tr>
                        <td>
                            <p class="content is-medium">@item.Shop</p>
                        </td>
                        <td>
                            <p class="content is-medium">@item.ProductsCount</p>
                        </td>
                        <td>
                            <p class="content is-medium">@item.OldestEntry</p>
                        </td>
                    </tr>
                }
            </table>
        </div>

        break;

    default:
        activeTab = ActiveTab.Main;
        break;
}

@code {

    private bool crawlersTabLoading;
    private bool databaseTabLoading;
    private bool summaryTabLoading;

    private ActiveTab activeTab = ActiveTab.Main;

    private enum ActiveTab
    {
        Main,
        Database,
        Summary
    }

    public enum Shops
    {
        Biedronka = 0,
        Lidl = 1,
        Kaufland = 2,
        Carrefour = 3,
        Auchan = 4,
        Stokrotka = 5,
        Zabka = 6
    }

    protected override async Task OnInitializedAsync()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.CheckDataBase();
            databaseTabLoading = false;
        }
    }

    private void SelectCrawlersTab()
    {
        activeTab = ActiveTab.Main;
    }

    private void SelectDatabaseTab()
    {
        activeTab = ActiveTab.Database;
    }

    private void SelectSummaryTab()
    {
        activeTab = ActiveTab.Summary;
    }


    #region Crawlers

    private async Task RunEngine()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.RunEngineAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task RunEngine(Shops shop)
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.RunEngineAsync(shop.ToString());
            crawlersTabLoading = false;
        }
    }

    private async Task ClearCache()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.ClearCacheAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task ClearCache(Shops shop)
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.ClearCacheAsync(shop.ToString());
            crawlersTabLoading = false;
        }
    }

    #endregion

    #region Database

    private async Task RefreshDataBaseSummary()
    {
        if (summaryTabLoading)
        {
            return;
        }
        else
        {
            summaryTabLoading = true;
            await commander.CheckDataBase();
            summaryTabLoading = false;
        }
    }

    private async Task ClearDataBase()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.ClearDataBaseAsync();
            databaseTabLoading = false;
        }
    }

    private async Task ClearDataBase(Shops shop)
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.ClearDataBaseAsync(shop.ToString());
            databaseTabLoading = false;
        }
    }

    private async Task UpdateDataBase()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.UpdateAllData();
            databaseTabLoading = false;
        }
    }

    private async Task UpdateDataBase(Shops shop)
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.UpdateDataBase(shop.ToString());
            databaseTabLoading = false;
        }
    }

    #endregion

}