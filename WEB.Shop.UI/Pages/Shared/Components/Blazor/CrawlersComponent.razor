@page "/crawlerscommander"
@using Microsoft.AspNetCore.Components.Authorization
@using WEB.Shop.Application.Crawlers
@inject CrawlersCommander commander

<div>
    <div class="tabs is-centered">
        <ul>
            <li><a @onclick="SelectCrawlersTab">Crawlers</a></li>
            <li><a @onclick="SelectDatabaseTab">Database</a></li>
        </ul>
    </div>
</div>

@switch (activeTab)
{
    case ActiveTab.Main:

        @if (crawlersTabLoading)
        {
            <div class="container">
                <progress class="progress is-small is-primary" max="100">25%</progress>
            </div>
        }

        <div class="container">
            <div class="columns">
                <div class="column">
                    <table class="table is-striped">
                        <tr>
                            <th>Section</th>
                            <th>Import</th>
                            <th>Clear</th>
                            <th>Search Engine Cache</th>
                        </tr>
                        <tr>
                            <td>
                                <p>All Crawlers</p>
                            </td>
                            <td>
                                <button class="button is-warning" @onclick="RunEngines">Run Crawler</button>
                            </td>
                            <td>
                                <button class="button is-danger" @onclick="ClearAllData">Delete</button>
                            </td>
                            <td>
                                <p class="content is-medium">@commander.DataCache.Values.Sum()</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p>Bierdronka</p>
                            </td>
                            <td>
                                <button class="button is-warning" @onclick="RunBiedronkaEngine">Run Crawler</button>
                            </td>
                            <td>
                                <button class="button is-danger" @onclick="ClearBiedronkaCache">Delete</button>
                            </td>
                            <td>
                                <p class="content is-medium">@commander.DataCache["Biedronka"]</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p>Kaufland</p>
                            </td>
                            <td>
                                <button class="button is-warning" @onclick="RunKauflandEngine">Run Crawler</button>
                            </td>
                            <td>
                                <button class="button is-danger" @onclick="ClearKauflandCache">Delete</button>
                            </td>
                            <td>
                                <p class="content is-medium">@commander.DataCache["Kaufland"]</p>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>

        break;
    case ActiveTab.Summary:

        @if (databaseTabLoading)
        {
            <div class="container">
                <progress class="progress is-small is-primary" max="100">25%</progress>
            </div>
        }

        <div class="columns">
            <div class="column is-3">
                <div class="block">
                    <button class="button is-success" @onclick="RefreshDataBaseSummary">Check DataBase Data</button>
                </div>
                    <button class="button is-danger" @onclick="ClearAllData">Clear All Data</button>
                    <button class="button is-danger" @onclick="ClearBiedronkaDataBase">Clear Biedronka Data</button>
                    <button class="button is-danger" @onclick="ClearKauflandDataBase">Clear Kaufland Data</button>
         
                <div class="container">
                    <button class="button is-warning" @onclick="UpdateDataBase">Update All Data</button>
                    <button class="button btn-warning" @onclick="UpdateBiedronkaDataBase">Update Biedronka Data</button>
                    <button class="button btn-warning" @onclick="UpdateKauflandDataBase">Update Kaufland Data</button>
                </div>
            </div>
            <div class="column is-6">
                <table class="table is-striped">
                    <tr>
                        <th>Shop</th>
                        <th>Products</th>
                        <th>Oldest Record</th>
                    </tr>

                    @foreach (var item in commander.DataBaseCheck)
                    {
                        <tr>
                            <td>
                                <p class="content is-medium">@item.Shop</p>
                            </td>
                            <td>
                                <p class="content is-medium">@item.ProductsCount</p>
                            </td>
                            <td>
                                <p class="content is-medium">@item.OldestEntry</p>
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>

        break;

    default:
        activeTab = ActiveTab.Main;
        break;
}

@code {

    private bool crawlersTabLoading;
    private bool databaseTabLoading;

    private ActiveTab activeTab = ActiveTab.Main;

    private enum ActiveTab
    {
        Main,
        Summary,
    }

    protected override async Task OnInitializedAsync()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.CheckDataBase();
            databaseTabLoading = false;
        }
    }

    private void SelectCrawlersTab()
    {
        activeTab = ActiveTab.Main;
    }

    private void SelectDatabaseTab()
    {
        activeTab = ActiveTab.Summary;
    }

    #region Crawlers

    private async Task RunEngines()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.RunEnginesAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task RunBiedronkaEngine()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.RunBiedronkaEngineAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task RunKauflandEngine()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.RunKauflandEngineAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task ClearAllCache()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.ClearCacheFullAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task ClearKauflandCache()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.ClearCacheKauflandEngineAsync();
            crawlersTabLoading = false;
        }
    }

    private async Task ClearBiedronkaCache()
    {
        if (crawlersTabLoading)
        {
            return;
        }
        else
        {
            crawlersTabLoading = true;
            await commander.ClearCacheBiedronkaEngineAsync();
            crawlersTabLoading = false;
        }
    }

    #endregion

    #region Database

    private async Task RefreshDataBaseSummary()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.CheckDataBase();
            databaseTabLoading = false;
        }
    }

    private async Task ClearAllData()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.ClearDataBaseAsync();
            databaseTabLoading = false;
        }
    }

    private async Task ClearBiedronkaDataBase()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.ClearBiedronkaDataAsync();
            databaseTabLoading = false;
        }
    }

    private async Task ClearKauflandDataBase()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.ClearKauflandDataAsync();
            databaseTabLoading = false;
        }
    }

    private async Task UpdateDataBase()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.UpdateAllData();
            databaseTabLoading = false;
        }
    }

    private async Task UpdateBiedronkaDataBase()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.UpdateBiedronkaBase();
            databaseTabLoading = false;
        }
    }

    private async Task UpdateKauflandDataBase()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await commander.UpdateKauflandBase();
            databaseTabLoading = false;
        }
    }

    #endregion

}