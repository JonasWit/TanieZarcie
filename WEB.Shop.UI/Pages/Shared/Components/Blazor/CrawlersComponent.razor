@page "/crawlerscommander"
@using Microsoft.AspNetCore.Components.Authorization
@using WEB.Shop.Application.Crawlers
@inject CrawlersCommander commander

<div>
    <div class="tabs is-centered">
        <ul>
            <li><a @onclick="SelectMainTab">Main Options</a></li>
            <li><a @onclick="SelectSummaryTab">Database Summary</a></li>
        </ul>
    </div>
</div>

@switch (activeTab)
{
    case ActiveTab.Main:

        @if (mainLoading)
        {
            <div class="container">
                <h4 class="title is-4">@commander.CurrentAction</h4>
                <progress class="progress is-small is-primary" max="100">25%</progress>
            </div>
        }

        <div class="container">
            <div class="columns">
                <div class="column">
                    <table class="table is-striped">
                        <tr>
                            <th>Section</th>
                            <th>Import</th>
                            <th>Clear</th>
                            <th>Search Engine Cache</th>
                        </tr>
                        <tr>
                            <td>
                                <p>All Crawlers</p>
                            </td>
                            <td>
                                <button class="button is-warning" @onclick="RunEngines">Run Crawler</button>
                            </td>
                            <td>
                                <button class="button is-danger">Delete</button>
                            </td>
                            <td>
                                <p class="content is-medium">@commander.DataCache.Values.Sum()</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p>Bierdronka</p>
                            </td>
                            <td>
                                <button class="button is-warning" @onclick="RunBiedronkaEngine">Run Crawler</button>
                            </td>
                            <td>
                                <button class="button is-danger">Delete</button>
                            </td>
                            <td>
                                <p class="content is-medium">@commander.DataCache["Biedronka"]</p>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <p>Kaufland</p>
                            </td>
                            <td>
                                <button class="button is-warning" @onclick="RunKauflandEngine">Run Crawler</button>
                            </td>
                            <td>
                                <button class="button is-danger">Delete</button>
                            </td>
                            <td>
                                <p class="content is-medium">@commander.DataCache["Kaufland"]</p>
                            </td>
                        </tr>

                    </table>
                    <table class="table is-striped">
                        <tr>
                            <th>Data Base Options</th>
                        </tr>
                        <tr>
                            <td>
                                <button class="btn btn-primary" @onclick="ClearDataBase">Clear DataBase</button>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <button class="btn btn-primary" @onclick="UpdateDataBase">Update Database with results</button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>

        break;
    case ActiveTab.Summary:

        <div>
            <div>
                <button class="button is-success" @onclick="RefreshDataBaseSummary">Check DataBase Data</button>
            </div>

            <table class="table is-striped">
                <tr>
                    <th>Shop</th>
                    <th>Products</th>
                    <th>Oldest Record</th>
                </tr>

                @foreach (var item in commander.DataBaseCheck)
                {
                    <tr>
                        <td>
                            <p class="content is-medium">@item.Shop</p>
                        </td>
                        <td>
                            <p class="content is-medium">@item.ProductsCount</p>
                        </td>
                        <td>
                            <p class="content is-medium">@item.OldestEntry</p>
                        </td>
                    </tr>
                }
            </table>
        </div>

        break;

    default:
        activeTab = ActiveTab.Main;
        break;
}

@code {

    private bool mainLoading;
    private bool summaryLoading;

    private ActiveTab activeTab = ActiveTab.Main;

    private enum ActiveTab
    {
        Main,
        Summary,
    }

    //protected override async Task OnInitializedAsync()
    //{
    //todo: add db data refresh on init
    //}

    private void SelectMainTab()
    {
        activeTab = ActiveTab.Main;
    }

    private void SelectSummaryTab()
    {
        activeTab = ActiveTab.Summary;
    }

    private async Task RefreshDataBaseSummary()
    {
        if (summaryLoading)
        {
            return;
        }
        else
        {
            summaryLoading = true;
            await commander.CheckDataBase();
            summaryLoading = false;
        }
    }

    private async Task RunEngines()
    {
        if (mainLoading)
        {
            return;
        }
        else
        {
            mainLoading = true;
            await commander.RunEngineAsync();
            mainLoading = false;
        }
    }

    private async Task RunBiedronkaEngine()
    {
        if (mainLoading)
        {
            return;
        }
        else
        {
            mainLoading = true;
            await commander.RunBiedronkaEngineAsync();
            mainLoading = false;
        }
    }

    private async Task RunKauflandEngine()
    {
        if (mainLoading)
        {
            return;
        }
        else
        {
            mainLoading = true;
            await commander.RunKauflandEngineAsync();
            mainLoading = false;
        }
    }

    private async Task ClearDataBase()
    {
        if (mainLoading)
        {
            return;
        }
        else
        {
            mainLoading = true;
            await commander.ClearDataBaseAsync();
            mainLoading = false;
        }
    }

    private async Task UpdateDataBase()
    {
        if (mainLoading)
        {
            return;
        }
        else
        {
            mainLoading = true;
            await commander.UpdateDataBase();
            mainLoading = false;
        }
    }
}