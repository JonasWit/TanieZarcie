@using WEB.Shop.Application.ShopAdmin

@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<IdentityUser> userManager
@inject GetShops getShops
@inject IJSRuntime jsRuntime

<div class="container-fluid">
    <div class="row mb-5">
        <div class="col-xl-10 col-lg-9 col-md-8 ml-auto">

            <MessagePopup Message="@message.Message" IsVisible="@message.PopupVisible" MessageType="@message.MessageType"></MessagePopup>

            <div class="row align-items-center">
                <div class="col-xl-6 col-12 mb-3 mb-xl-0">
                    <div class="card rounded mt-5">
                        <div class="card-body">
                            <h3 class="text-muted text-center mb-4">Add User</h3>

                            <EditForm Model="@newShop" OnValidSubmit="AddShop">
                                <DataAnnotationsValidator />

                                <div class="form-group">

                                    <select class="form-control py-2 mb-3" bind="@selectedNewShop">
                                        @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                                        {
                                            <option value=@shop.ToString()>@shop.ToString()</option>
                                        }
                                    </select>

                                    <button type="submit" class="btn btn-block text-uppercase font-weight-bold text-light bg-info py-2 mb-5">Add Shop</button>
                                </div>
                            </EditForm>

                            <EditForm Model="@newShop" OnValidSubmit="AddUrl">
                                <DataAnnotationsValidator />

                                <div class="form-group">
                                    <select class="form-control py-2 mb-3" bind="@selectedNewShopForUrl">
                                        @foreach (var shop in shops)
                                        {
                                            <option value=@shop.Name>@shop.Name</option>
                                        }
                                    </select>

                                    <InputText @bind-Value="newUrl.Shop" class="form-control py-2 mb-3" type="text" placeholder="Url" />
                                    <ValidationMessage For="@(() => newShop.Name)" />
                                    <button type="submit" class="btn btn-block text-uppercase font-weight-bold text-light bg-info py-2 mb-5">Add Url</button>
                                </div>
                            </EditForm>

                        </div>
                    </div>
                </div>
                <div class="col-xl-6 col-12 mb-3 mb-xl-0">
                    <h3 class="text-muted text-center">Users</h3>
                    <table class="table table-dark table-hover text-center">
                        <thead>
                            <tr class="text-muted">
                                <th>Name</th>
                                <th>Url</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var shop in shops)
                            {
                                <tr>
                                    <th>@shop.Name</th>
                                    <td>
                                        <p>All Urs Below</p>
                                    </td>
                                    <td>
                                        <a @onclick="(() => DeleteShop(shop.Id))">
                                            <span class="badge badge-danger w-75 py-2 tza-raise">Delete Shop</span>
                                        </a>
                                    </td>
                                </tr>

                                foreach (var url in shop.PromoSheets)
                                {
                                    <tr>
                                        <th>@shop.Name</th>
                                        <td>
                                            <p class="text-sm-left">@url.Url</p>
                                        </td>
                                        <td>
                                            <a @onclick="(() => DeleteUrl(url.Id))">
                                                <span class="badge badge-danger w-75 py-2 tza-raise">Delete Url</span>
                                            </a>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private bool loading;

    private List<GetShops.Response> shops;

    private GetShops.Response selectedNewShop;
    private GetShops.Response selectedNewShopForUrl;

    private readonly ShopModel newShop = new ShopModel();
    private readonly UrlModel newUrl = new UrlModel();

    private MessageModel message = new MessageModel();

    public class MessageModel
    {
        public string Message { get; set; }
        public string CssClass { get; set; }
        public MessagePopup.MessageTypes MessageType { get; set; }
        public bool PopupVisible { get; set; }
    }

    public class ShopModel
    {
        [Required(ErrorMessage = "Shop Name is required!")]
        public string Name { get; set; }
    }

    public class UrlModel
    {
        [Required(ErrorMessage = "Shop Name is required!")]
        public string Shop { get; set; }

        [Required(ErrorMessage = "Url is required!")]
        public string Url { get; set; }
    }

    protected override async Task OnInitializedAsync() => shops = getShops.Do().ToList();

    private async Task AddShop()
    {
        if (loading)
        {
            return;
        }
        else
        {
            try
            {
                loading = true;


            }
            catch (Exception ex)
            {
                message.Message = ex.Message;
                message.MessageType = MessagePopup.MessageTypes.Danger;
            }
            finally
            {
                message.PopupVisible = true;
                await jsRuntime.InvokeVoidAsync("infoMessage", message);
                loading = false;
            }
        }
    }

    private async Task DeleteShop(int id)
    {
        if (loading)
        {
            return;
        }
        else
        {
            try
            {
                loading = true;


            }
            catch (Exception ex)
            {
                message.Message = ex.Message;
                message.MessageType = MessagePopup.MessageTypes.Danger;
            }
            finally
            {
                message.PopupVisible = true;
                await jsRuntime.InvokeVoidAsync("infoMessage", message);
                loading = false;
            }
        }
    }

    private async Task AddUrl()
    {
        if (loading)
        {
            return;
        }
        else
        {
            try
            {
                loading = true;


            }
            catch (Exception ex)
            {
                message.Message = ex.Message;
                message.MessageType = MessagePopup.MessageTypes.Danger;
            }
            finally
            {
                message.PopupVisible = true;
                await jsRuntime.InvokeVoidAsync("infoMessage", message);
                loading = false;
            }
        }
    }

    private async Task DeleteUrl(int id)
    {
        if (loading)
        {
            return;
        }
        else
        {
            try
            {
                loading = true;


            }
            catch (Exception ex)
            {
                message.Message = ex.Message;
                message.MessageType = MessagePopup.MessageTypes.Danger;
            }
            finally
            {
                message.PopupVisible = true;
                await jsRuntime.InvokeVoidAsync("infoMessage", message);
                loading = false;
            }
        }
    }

}
