@using WEB.Shop.Application.Crawlers
@using WEB.Shop.Application.Enums
@inject CrawlersCommander Commander

@if (!databaseTabLoading)
{
    <!-- Card -->
    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-10 col-lg-9 col-md-8 ml-auto">
                <div class="row pt-md-5 mt-md-3 mb-5">
                    <div class="col-xl-3 col-sm-6 p-2">
                        <!-- Crawlers Card -->
                        <div class="card tza-card-common">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <i class="fas fa-bug fa-3x text-warning"></i>
                                    <div class="text-right text-secondary">
                                        <h5>Data in Cache</h5>
                                        <h3>@Commander.DataCacheCount.Sum(s => s.Value)</h3>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer text-secondary">
                                <button class="bg-transparent border-0">
                                    <i class="fas fa-sync mr-3 tza-nav-icon"></i>
                                    <span>Run all crawlers</span>
                                </button>
                                <button class="bg-transparent border-0">
                                    <i class="fas fa-cut mr-3 tza-nav-icon"></i>
                                    <span>Clear Cache</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tables -->
    <div class="container-fluid">
        <div class="row mb-5">
            <div class="col-xl-10 col-lg-9 col-md-8 ml-auto">
                <div class="row align-items-center">
                    <div class="col-xl-6 col-12 mb-3 mb-xl-0">
                        <h3 class="text-muted text-center">Payments</h3>
                        <table class="table table-light table-hover text-center rounded">
                            <thead>
                                <tr class="text-muted">
                                    <th>Shop</th>
                                    <th>Data</th>
                                    <th>Run Crawler</th>
                                    <th>Clear Data</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                                {
                                    <tr>
                                        <td>@shop.ToString()</td>
                                        <td>@Commander.DataCachePromoCount[shop.ToString()] / @Commander.DataCacheCount[shop.ToString()]</td>
                                        @*<td><button type="button" class="btn btn-info btn-sm" @onclick="(() => UpdateDataBase(activeShop))">Run</button></td>
                                        <td><button type="button" class="btn btn-warning btn-sm" @onclick="(() => ClearDataBase(activeShop))">Clear</button></td>*@
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="col-xl-6 col-12 mb-3 mb-xl-0">
                        <h4 class="text-muted text-center">Data in Memory</h4>
                        <div class="bg-light text-dark p-4 rounded">
                            @{
                                double totalProducts = Commander.DataCacheCount.Sum(s => s.Value);
                                double avg = (totalProducts / Commander.DataCacheCount.Count(x => x.Value > 0));

                                @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                                {
                                    double shopProducts = Commander.DataCacheCount[shop.ToString()];
                                    double shopShare = totalProducts == 0 ? 0 : Math.Round(((shopProducts / totalProducts) * 100), 2);

                                    string color = "bg-danger";

                                    if (shopShare >= 0 && shopShare <= (avg * 0.2))
                                    {
                                        color = "bg-danger";
                                    }
                                    else if (shopShare >= (avg * 0.21) && shopShare <= (avg * 0.7))
                                    {
                                        color = "bg-warning";
                                    }
                                    else
                                    {
                                        color = "bg-success";
                                    }

                                    <h6 class="mb-3 text-center">@shop.ToString()</h6>
                                    <div class="progress mb-4" style="height: 20px">
                                        <div class="progress-bar text-dark text-center progress-bar-striped font-weight-bold @color" style="width: @($"{ shopShare }%")">
                                            @($"{ shopShare }%")
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- Loader-->
    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-10 col-lg-9 col-md-8 ml-auto">
                <div class="row pt-md-5 mt-md-3 mb-5">
                    <div class="tza-loader">
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



    <div class="columns">
        <div class="column">
            <div class="box">
                <table class="table is-narrow is-striped">
                    <thead>
                        <tr>
                            <th>Shop</th>
                            <th>Data (Promo / Total)</th>
                            <th>Oldest Record</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Shops shop in (Shops[])Enum.GetValues(typeof(Shops)))
                        {
                            <tr @onclick="(() => SelectShop(shop))" class="@($"{(activeShop == shop && !activeAll ? "is-selected" : "")}")">
                                <td>@shop.ToString()</td>
                                <td>
                                    @if (Commander.DataBaseCheck.Where(x => x.Shop == shop.ToString()).ToList().Count != 0)
                                    {
                                        <span>
                                            @Commander.DataBaseCheck.Where(x => x.Shop == shop.ToString()).FirstOrDefault()?.PromoProductsCount / @Commander.DataBaseCheck.Where(x => x.Shop == shop.ToString()).FirstOrDefault()?.ProductsCount
                                        </span>
                                    }
                                    else
                                    {
                                        <span>0</span>
                                    }
                                </td>
                                <td>
                                    @{
                                        var olderstRecord = Commander.DataBaseCheck
                                            .Where(x => x.Shop == shop.ToString()).FirstOrDefault()?
                                            .OldestEntry;

                                        if (olderstRecord != null)
                                        {
                                            var offerTime = DateTime.Now - (DateTime)olderstRecord;

                                            var days = offerTime.Days;
                                            var hours = offerTime.Hours;
                                            var minutes = offerTime.Minutes;

                                            if (days < 3 && days != 0)
                                            {
                                                <span class="tag is-warning">@olderstRecord.ToString()</span>
                                            }
                                            else if (days > 2 && days != 0)
                                            {
                                                <span class="tag is-danger">@olderstRecord.ToString()</span>
                                            }
                                            else
                                            {
                                                <span class="tag is-success">@olderstRecord.ToString()</span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="tag is-info">No data</span>
                                        }
                                    }
                                </td>
                            </tr>
                        }
                        <tr @onclick="SelectAllShops" class="@($"{(activeAll ? "is-selected" : "")}")">
                            <td>All Shops</td>
                            <td>
                                @if (@Commander.DataBaseCheck.Sum(x => x.ProductsCount) != 0)
                                {
                                    <span class="tag is-warning">@Commander.DataBaseCheck.Sum(x => x.ProductsCount)</span>
                                }
                                else
                                {
                                    <span class="tag is-success">@Commander.DataBaseCheck.Sum(x => x.ProductsCount)</span>
                                }
                            </td>
                            <td>
                                @{
                                    DateTime? olderstRecordAll = Commander.DataBaseCheck.Any() ? (DateTime?)Commander.DataBaseCheck.Max(x => x.OldestEntry) : null;

                                    if (olderstRecordAll != null)
                                    {

                                        var offerTime = DateTime.Now - (DateTime)olderstRecordAll;

                                        var days = offerTime.Days;
                                        var hours = offerTime.Hours;
                                        var minutes = offerTime.Minutes;


                                        if (days < 3 && days != 0)
                                        {
                                            <span class="tag is-warning">@olderstRecordAll.ToString()</span>
                                        }
                                        else if (days > 2 && days != 0)
                                        {
                                            <span class="tag is-danger">@olderstRecordAll.ToString()</span>
                                        }
                                        else
                                        {
                                            <span class="tag is-success">@olderstRecordAll.ToString()</span>
                                        }
                                    }
                                    else
                                    {
                                        <span class="tag is-info">No data</span>
                                    }
                                }
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        @*<div class="column">
            <div class="box">
                @if (activeAll)
                {
                    <p class="content">Options for All</p>
                    <button class="button is-small is-warning" @onclick="UpdateDataBase">Update Data Base</button>
                    <button class="button is-small is-danger" @onclick="ClearDataBase">Delete All Data</button>
                }
                else
                {
                    <p class="content">Options for @activeShop.ToString()</p>
                    <button class="button is-small is-warning" @onclick="(() => UpdateDataBase(activeShop))">Load data for @activeShop.ToString()</button>
                    <button class="button is-small is-danger" @onclick="(() => ClearDataBase(activeShop))">Delete data for @activeShop.ToString()</button>
                }
            </div>

            <div class="box">
                <p class="content">Data Base Options</p>
                <button class="button is-small is-success" @onclick="RefreshDataBaseSummary">Check DataBase Data</button>
            </div>
        </div>
    </div>*@
</div>

}

@code {

    private bool databaseTabLoading;

    private Shops activeShop = Shops.Biedronka;
    private bool activeAll = false;


    protected override async Task OnInitializedAsync()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            await Commander.CheckDataBase();
            databaseTabLoading = false;
        }
    }

    private void SelectShop(Shops shop)
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            activeAll = false;
            activeShop = shop;
            databaseTabLoading = false;
        }
    }

    private void SelectAllShops()
    {
        if (databaseTabLoading)
        {
            return;
        }
        else
        {
            databaseTabLoading = true;
            activeAll = true;
            databaseTabLoading = false;
        }
    }



}
